//@ sourceMappingURL=mark.map
// Generated by CoffeeScript 1.6.1
(function() {

  define(['cv/Rectangle', 'cv/Point'], function(Rectangle, Point) {
    var defaults, destRect, mark, p, shape, shapes, singleton;
    mark = function() {
      _.extend(p, defaults);
      return singleton;
    };
    p = {};
    defaults = {
      bounds: new Rectangle,
      fillStyle: 'black',
      shape: 'square',
      rotation: 0
    };
    singleton = {
      shape: function(shape) {
        p.shape = shape;
        return this;
      },
      fillStyle: function(cssColorStr) {
        p.fillStyle = cssColorStr;
        return this;
      },
      size: function(w, h) {
        if (h == null) {
          h = w;
        }
        p.bounds.w = w;
        p.bounds.h = h;
        return this;
      },
      x: function(x) {
        p.bounds.x = x;
        return this;
      },
      y: function(y) {
        p.bounds.y = y;
        return this;
      },
      w: function(w) {
        p.bounds.w = w;
        return this;
      },
      h: function(h) {
        p.bounds.h = h;
        return this;
      },
      rotation: function(rotation) {
        p.rotation = rotation;
        return this;
      },
      getBounds: function() {
        return shape().bounds();
      },
      render: function(ctx, viewport) {
        return shape().render(ctx, viewport);
      }
    };
    shape = function() {
      if (!shapes[p.shape]) {
        throw Error("Unknown shape type '" + p.shape + "'");
      }
      return shapes[p.shape];
    };
    shapes = {
      square: {
        bounds: function() {
          return p.bounds.clone();
        },
        render: function(ctx, viewport) {
          ctx.fillStyle = p.fillStyle;
          viewport.srcToDestRect(p.bounds, destRect);
          return ctx.fillRect(destRect.x, destRect.y, destRect.w, destRect.h);
        }
      },
      circle: {
        bounds: function() {
          return p.bounds.clone();
        },
        render: function(ctx, viewport) {
          var r, x, y;
          ctx.fillStyle = p.fillStyle;
          viewport.srcToDestRect(p.bounds, destRect);
          x = destRect.x + destRect.w / 2;
          y = destRect.y + destRect.h / 2;
          r = (destRect.w + destRect.h) / 4;
          ctx.beginPath();
          ctx.arc(x, y, r, 0, 2 * Math.PI);
          ctx.fill();
          return ctx.closePath();
        }
      }
    };
    destRect = new Point;
    return mark;
  });

}).call(this);
