//@ sourceMappingURL=step2_algebra.map
// Generated by CoffeeScript 1.6.1
(function() {

  define(['cv/match', 'cv/grammarOfGraphics/printTree', 'cv/Varset'], function(match, printTree, Varset) {
    var step2;
    return step2 = match('type', 'step2', {
      'statements': function(stmts, vars) {
        var stmt;
        return {
          type: 'statements',
          statements: (function() {
            var _i, _len, _ref, _results;
            _ref = stmts.statements;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              stmt = _ref[_i];
              _results.push(step2(stmt, vars));
            }
            return _results;
          })()
        };
      },
      'data': function(data, vars) {
        return data;
      },
      'statement': match('statementType', 'step2', {
        ELEMENT: function(stmt, vars) {
          return {
            type: 'statement',
            statementType: 'ELEMENT',
            expr: step2(stmt.expr, vars)
          };
        },
        TRANS: function(stmt, vars) {
          return stmt;
        },
        SCALE: function(stmt, vars) {
          return stmt;
        },
        COORD: function(stmt, vars) {
          return stmt;
        },
        GUIDE: function(stmt, vars) {
          return stmt;
        }
      }),
      'function': function(fn, vars) {
        var arg;
        return {
          type: 'function',
          name: fn.name,
          args: (function() {
            var _i, _len, _ref, _results;
            _ref = fn.args;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              arg = _ref[_i];
              _results.push(step2(arg, vars));
            }
            return _results;
          })()
        };
      },
      'cross': function(cross, vars) {
        var left, right;
        left = step2(cross.left, vars);
        right = step2(cross.right, vars);
        return Varset.cross(left, right);
      },
      'name': function(name, vars) {
        return Varset.fromVariable(vars[name.name]);
      }
    });
  });

}).call(this);
