//@ sourceMappingURL=printTree.map
// Generated by CoffeeScript 1.6.1
(function() {

  define(['cv/match'], function(match) {
    var byType, line, printTree;
    byType = function(fnName, fns) {
      return match('type', fns, fnName);
    };
    line = function(str) {
      return str + '\n';
    };
    return printTree = function(tree) {
      var p;
      p = byType('printTree', {
        'statements': function(statements, indent) {
          var i, s, ss, _ref;
          _ref = [statements.statements, indent], ss = _ref[0], i = _ref[1];
          return line(i + 'statements') + ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = ss.length; _i < _len; _i++) {
              s = ss[_i];
              _results.push(p(s, i + '  '));
            }
            return _results;
          })()).join('');
        },
        'statement': function(stmt, indent) {
          line(indent + 'statement: ' + stmt.statementType);
          return p(stmt.expr, indent + '  ');
        },
        'name': function(name, indent) {
          return line(indent + 'name ' + name.name);
        },
        'number': function(number, indent) {
          return line(indent + 'number ' + number.value);
        },
        'string': function(string, indent) {
          return line(indent + 'string ' + string.value);
        },
        'cross': function(cross, indent) {
          return [line(indent + 'cross'), line(indent + '  left'), p(cross.left, indent + '    '), line(indent + '  right'), p(cross.right, indent + '    ')].join('');
        },
        'assignment': function(assignment, indent) {
          return [line(indent + 'assignment'), line(indent + '  left'), p(assignment.left, indent + '    '), line(indent + '  right'), p(assignment.right, indent + '    ')].join('');
        },
        'function': function(fn, indent) {
          var arg;
          return [
            line(indent + 'function ' + fn.name), line(indent + '  args:'), ((function() {
              var _i, _len, _ref, _results;
              _ref = fn.args;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                arg = _ref[_i];
                _results.push(p(arg, indent + '    '));
              }
              return _results;
            })()).join('')
          ].join('');
        }
      });
      return p(tree, '');
    };
  });

}).call(this);
