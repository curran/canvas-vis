//@ sourceMappingURL=grammarOfGraphics.map
// Generated by CoffeeScript 1.6.1
(function() {

  require(['text!grammarOfGraphics.peg'], function(grammar) {
    var allNames, allVars, boundVars, builtins, byType, e, evaluate, exec, extractNames, freeVars, match, numSteps, parse, parser, printTree, reduce, rename, resolveNameConflicts, show, step, substitute, test;
    parser = PEG.buildParser(grammar);
    parse = parser.parse;
    match = function(property, fns, fnName) {
      if (fnName == null) {
        fnName = 'obj';
      }
      return function(obj) {
        var fn;
        fn = fns[obj[property]];
        if (fn) {
          return fn.apply(null, arguments);
        } else {
          throw Error("no match for " + fnName + "." + property + " = " + tree.type);
        }
      };
    };
    byType = function(fnName, fns) {
      return match('type', fns, 'byType');
    };
    show = byType('show', {
      'lambda': function(lambda) {
        var arg, body;
        arg = lambda.arg.name;
        body = show(lambda.body);
        return "(&" + arg + "." + body + ")";
      },
      'apply': function(apply) {
        if (apply.b.type === 'apply') {
          return (show(apply.a)) + '(' + (show(apply.b)) + ')';
        } else {
          return (show(apply.a)) + (show(apply.b));
        }
      },
      'name': function(name) {
        return name.name;
      },
      'number': function(number) {
        return number.value;
      }
    });
    numSteps = 0;
    evaluate = function(tree) {
      var curr, fixedPoint, prev;
      fixedPoint = false;
      while (!fixedPoint) {
        prev = show(tree);
        tree = reduce(tree);
        curr = show(tree);
        fixedPoint = prev === curr;
        numSteps++;
      }
      return tree;
    };
    builtins = {
      'I': "(&x.x)",
      'S': "(&wyx.y(wyx))",
      '+': "(&xy.xSy)",
      '-': "(&xy.yPx)",
      '*': "(&xyz.x(yz))",
      '/': "(&ab.Y(&rnc.(G1n)c(r(-nb)(Sc)))a0)",
      'T': "(&xy.x)",
      'F': "(&xy.y)",
      'N': "(&x.x(&uv.v)(&ab.a))",
      'Z': "(&x.xFNF)",
      'G': "(&xy.Z(xPy))",
      'P': "(&n.n(&pz.z(S(pT))(pT))(&z.z00)F)",
      'Y': "(&g.((&x.g(xx))(&x.g(xx))))",
      'A': "Y(&rn.Zn1(*(r(Pn))n))"
    };
    reduce = byType('reduce', {
      'lambda': function(lambda) {
        return {
          type: 'lambda',
          arg: lambda.arg,
          body: reduce(lambda.body)
        };
      },
      'name': function(name) {
        var builtin;
        builtin = builtins[name.name];
        if (builtin) {
          return reduce(parse(builtin));
        } else {
          return name;
        }
      },
      'apply': function(apply) {
        var lambda;
        if (apply.a.type === 'lambda') {
          lambda = resolveNameConflicts(apply.a, apply.b);
          return substitute(lambda.body, lambda.arg, apply.b);
        } else {
          return {
            type: 'apply',
            a: reduce(apply.a),
            b: reduce(apply.b)
          };
        }
      },
      'number': function(number) {
        var value;
        value = number.value;
        if (value === 0) {
          return parse('(&s.(&z.z))');
        } else {
          return evaluate(parse((_.flatten([
            (function() {
              var _i, _results;
              _results = [];
              for (_i = 1; 1 <= value ? _i <= value : _i >= value; 1 <= value ? _i++ : _i--) {
                _results.push('S(');
              }
              return _results;
            })(), '0', (function() {
              var _i, _results;
              _results = [];
              for (_i = 1; 1 <= value ? _i <= value : _i >= value; 1 <= value ? _i++ : _i--) {
                _results.push(')');
              }
              return _results;
            })()
          ])).join('')));
        }
      }
    });
    allNames = "tabcdefghijklmnopqrsuvwxyz".split('');
    resolveNameConflicts = function(a, b) {
      var i, newNames, oldNames, usedNames, _fn, _i, _ref;
      usedNames = _.union(allVars(a), allVars(b));
      newNames = _.difference(allNames, usedNames);
      oldNames = _.intersection(boundVars(a), freeVars(b));
      _fn = function() {
        return a = rename(a, oldNames[i], newNames[i]);
      };
      for (i = _i = 0, _ref = oldNames.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _fn();
      }
      return a;
    };
    extractNames = function(onlyLambdaArgs) {
      return byType('vars', {
        'lambda': function(lambda) {
          return _.union([lambda.arg.name], allVars(lambda.body));
        },
        'apply': function(apply) {
          return _.union(allVars(apply.a), allVars(apply.b));
        },
        'name': function(name) {
          if (onlyLambdaArgs) {
            return [];
          } else {
            return [name.name];
          }
        },
        'number': function(number) {
          return [];
        }
      });
    };
    allVars = extractNames(false);
    boundVars = extractNames(true);
    freeVars = function(tree) {
      return _.difference(allVars(tree), boundVars(tree));
    };
    rename = byType('rename', {
      'lambda': function(lambda, oldName, newName) {
        return {
          type: 'lambda',
          arg: rename(lambda.arg, oldName, newName),
          body: rename(lambda.body, oldName, newName)
        };
      },
      'apply': function(apply, oldName, newName) {
        return {
          type: 'apply',
          a: rename(apply.a, oldName, newName),
          b: rename(apply.b, oldName, newName)
        };
      },
      'name': function(name, oldName, newName) {
        if (name.name === oldName) {
          return {
            type: 'name',
            name: newName
          };
        } else {
          return name;
        }
      },
      'number': function(number) {
        return [];
      }
    });
    substitute = byType('substitute', {
      'lambda': function(lambda, old, replacement) {
        if (lambda.arg.name === old.name) {
          return lambda;
        } else {
          return {
            type: 'lambda',
            arg: lambda.arg,
            body: substitute(lambda.body, old, replacement)
          };
        }
      },
      'name': function(name, old, replacement) {
        if (name.name === old.name) {
          return replacement;
        } else {
          return name;
        }
      },
      'apply': function(apply, old, replacement) {
        return {
          type: 'apply',
          a: substitute(apply.a, old, replacement),
          b: substitute(apply.b, old, replacement)
        };
      }
    });
    e = function(input, output) {
      var inputResult, numStepsForInput, outputResult;
      console.log("testing '" + input + "'");
      numSteps = 0;
      inputResult = exec(input);
      numStepsForInput = numSteps;
      outputResult = exec(output);
      if (inputResult !== outputResult) {
        return console.error("Test failed: for input '" + input + "',\nexpected " + outputResult + "\nbut got  " + inputResult);
      } else {
        return console.log("  ok, took " + numStepsForInput + " steps");
      }
    };
    exec = function(expr) {
      return show(evaluate(parse(expr)));
    };
    test = function() {
      e("x", "x");
      e("xy", "xy");
      e("(&x.xx)y", "yy");
      e("(&x.xx)(&x.x)", "(&x.x)");
      e("(&x.x)(&x.x)", "(&x.x)");
      e("(&x.(&y.xy))y", "(&t.yt)");
      e("(&x.(&y.(x(&x.xy))))y", "(&t.y(&x.xt))");
      e("(&y.(&x.y((&z.z)x)))", "(&y.(&x.yx))");
      e("(&y.(&x.y((&s.(&z.z))yx)))", "(&y.(&x.yx))");
      e("(&w.(&y.(&x.y(wyx))))(&s.(&z.z))", "(&y.(&x.yx))");
      e("(&sz.z)", "(&s.(&z.z))");
      e("(&wxy.ywx)abc", "cab");
      e("(&wxyz.zyxw)abcd", "dcba");
      e("I", "(&x.x)");
      e("S", "(&w.(&y.(&x.y(wyx))))");
      e("(&s.(&z.z))", "(&s.(&z.z))");
      e("(&w.(&y.(&x.y(wyx))))(&s.(&z.z))", "(&y.(&x.yx))");
      e("S(&s.(&z.z))", "(&y.(&x.yx))");
      e("0", "(&s.(&z.z))");
      e("1", "(&y.(&x.yx))");
      e("7", "(&y.(&x.y(y(y(y(y(y(yx))))))))");
      e("+", "(&x.(&y.x(&w.(&y.(&x.y(wyx))))y))");
      e("*", "(&x.(&y.(&z.x(yz))))");
      e("(&w.(&y.(&x.y(wyx))))(&s.(&z.z))", "(&y.(&x.yx))");
      e("S0", "(&y.(&x.yx))");
      e("+ 2 3", "(&y.(&x.y(y(y(y(yx))))))");
      e("+ 2 1", "(&y.(&x.y(y(yx))))");
      e("* 4 3", "(&z.(&x.z(z(z(z(z(z(z(z(z(z(z(zx)))))))))))))");
      e("* 2 3", "(&z.(&x.z(z(z(z(z(zx)))))))");
      e("S (* 2 (+ 1 1))", "(&y.(&x.y(y(y(y(yx))))))");
      e("S(S(S(0)))", "(&y.(&x.y(y(yx))))");
      e("(&x.xx)y", "yy");
      e("(&wxy.ywx)abc", "cab");
      e("7", "(&y.(&x.y(y(y(y(y(y(yx))))))))");
      e("+ 3 5", "(&y.(&x.y(y(y(y(y(y(y(yx)))))))))");
      e("(&x.(&y.xy))y", "(&t.yt)");
      e("(&x.(&y.(x(&x.xy))))y", "(&t.y(&x.xt))");
      e("T", "(&xy.x)");
      e("F", "(&xy.y)");
      e("N", "(&x.x(&uv.v)(&ab.a))");
      e("Z", "(&x.xFNF)");
      e("P1", "(&s.(&z.z))");
      e("P5", "(&y.(&x.y(y(y(yx)))))");
      e("A1", "(&z.(&x.zx))");
      e("A3", "(&z.(&x.z(z(z(z(z(zx)))))))");
      e("/ 4 2", "2");
      return e("/ 3 2", "1");
    };
    step = function(n, expr) {
      var tree, _i, _results;
      tree = parse(expr);
      _results = [];
      for (_i = 0; 0 <= n ? _i <= n : _i >= n; 0 <= n ? _i++ : _i--) {
        _results.push((function() {
          console.log(show(tree));
          return tree = reduce(tree);
        })());
      }
      return _results;
    };
    printTree = function(tree) {
      var helper;
      helper = byType('printTree', {
        'lambda': function(lambda, indent) {
          console.log(indent + 'lambda');
          indent += '  ';
          console.log(indent + 'arg');
          helper(lambda.arg, indent);
          console.log(indent + 'body');
          return helper(lambda.body, indent);
        },
        'name': function(name, indent) {
          return console.log(indent + 'name ' + name.name);
        },
        'number': function(number, indent) {
          return console.log(indent + 'number ' + number.value);
        },
        'apply': function(apply, indent) {
          console.log(indent + 'apply');
          indent += '  ';
          console.log(indent + 'a');
          helper(apply.a, indent);
          console.log(indent + 'b');
          return helper(apply.b, indent);
        }
      });
      return helper(tree, '');
    };
    return _.extend(window, {
      exec: exec,
      evaluate: evaluate,
      reduce: reduce,
      test: test,
      show: show,
      parser: parser,
      byType: byType,
      allVars: allVars,
      freeVars: freeVars,
      boundVars: boundVars,
      rename: rename,
      printTree: printTree,
      step: step
    });
  });

}).call(this);
