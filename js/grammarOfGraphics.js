//@ sourceMappingURL=grammarOfGraphics.map
// Generated by CoffeeScript 1.6.1
(function() {

  require(['cv/grammarOfGraphics/parser'], function(parser) {
    var byType, match, printTree, testInput;
    match = function(property, fns, fnName) {
      if (fnName == null) {
        fnName = 'obj';
      }
      return function(obj) {
        var fn, key;
        key = obj[property];
        fn = fns[key];
        if (fn) {
          return fn.apply(null, arguments);
        } else {
          throw Error("no match for " + fnName + "." + property + " = " + key);
        }
      };
    };
    byType = function(fnName, fns) {
      return match('type', fns, fnName);
    };
    testInput = "DATA: response = response\nDATA: gender = Gender\nSCALE: cat(dim(1), values(\"Rarely\", \"Infrequently\"))\nSCALE: cat(dim(2), values(\"Female\", \"Male\"))\nCOORD: rect(dim(2),polar.theta(dim(1)))\nELEMENT: interval.stack(position(summary.proportion(response * gender)), label(response), color(response))";
    printTree = function(tree) {
      var helper;
      helper = byType('printTree', {
        'statements': function(statements, indent) {
          console.log(indent + 'statements');
          indent += '  ';
          return _.each(statements.statements, function(statement) {
            return helper(statement, indent);
          });
        },
        'statement': function(stmt, indent) {
          console.log(indent + 'statement: ' + stmt.statementType);
          indent += '  ';
          return helper(stmt.expr, indent);
        },
        'name': function(name, indent) {
          return console.log(indent + 'name ' + name.name);
        },
        'number': function(number, indent) {
          return console.log(indent + 'number ' + number.value);
        },
        'string': function(string, indent) {
          return console.log(indent + 'string ' + string.value);
        },
        'cross': function(cross, indent) {
          console.log(indent + 'cross');
          indent += '  ';
          console.log(indent + 'left');
          helper(cross.left, indent + '  ');
          console.log(indent + 'right');
          return helper(cross.right, indent + '  ');
        },
        'assignment': function(assignment, indent) {
          console.log(indent + 'cross');
          indent += '  ';
          console.log(indent + 'left');
          helper(assignment.left, indent);
          console.log(indent + 'right');
          return helper(assignment.right, indent);
        },
        'function': function(fn, indent) {
          console.log(indent + 'function ' + fn.name);
          indent += '  ';
          console.log(indent + 'args:');
          indent += '  ';
          return _.each(fn.args, function(arg) {
            return helper(arg, indent);
          });
        }
      });
      return helper(tree, '');
    };
    return printTree(parser.parse(testInput));
  });

}).call(this);
