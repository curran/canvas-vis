//@ sourceMappingURL=grammarOfGraphics.map
// Generated by CoffeeScript 1.6.1
(function() {

  define(['cv/grammarOfGraphics/parser', 'cv/match', 'cv/Varset'], function(parser, match, Varset) {
    var algebra, execute, renderer, scales, show, variables;
    execute = function(columns, expression) {
      var renderKey, scaleObjects, tree, vars;
      tree = parser.parse(expression);
      vars = variables(tree, columns);
      tree = algebra(tree, vars);
      scaleObjects = scales(tree);
      renderKey = renderer(tree, scaleObjects);
      console.log(scaleObjects);
      return tree;
    };
    variables = function(tree, columns) {
      var stmt, vars, _i, _len, _ref;
      vars = _.extend({}, columns);
      _ref = tree.statements;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        stmt = _ref[_i];
        if (stmt.type === 'data') {
          vars[stmt.newName] = columns[stmt.oldName];
        }
      }
      return vars;
    };
    algebra = match('type', 'algebra', {
      'statements': function(stmts, vars) {
        var stmt;
        return {
          type: 'statements',
          statements: (function() {
            var _i, _len, _ref, _results;
            _ref = stmts.statements;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              stmt = _ref[_i];
              _results.push(algebra(stmt, vars));
            }
            return _results;
          })()
        };
      },
      'data': function(data, vars) {
        return data;
      },
      'statement': match('statementType', 'algebra', {
        ELEMENT: function(stmt, vars) {
          return {
            type: 'statement',
            statementType: 'ELEMENT',
            expr: algebra(stmt.expr, vars)
          };
        },
        TRANS: function(stmt, vars) {
          return stmt;
        },
        SCALE: function(stmt, vars) {
          return stmt;
        },
        COORD: function(stmt, vars) {
          return stmt;
        },
        GUIDE: function(stmt, vars) {
          return stmt;
        }
      }),
      'function': function(fn, vars) {
        var arg;
        return {
          type: 'function',
          name: fn.name,
          args: (function() {
            var _i, _len, _ref, _results;
            _ref = fn.args;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              arg = _ref[_i];
              _results.push(algebra(arg, vars));
            }
            return _results;
          })()
        };
      },
      'cross': function(cross, vars) {
        var left, right;
        left = algebra(cross.left, vars);
        right = algebra(cross.right, vars);
        return Varset.cross(left, right);
      },
      'name': function(name, vars) {
        return Varset.fromVariable(vars[name.name]);
      }
    });
    scales = match('type', 'scales', {
      'statements': function(stmts) {
        var stmt;
        return _.filter((function() {
          var _i, _len, _ref, _results;
          _ref = stmts.statements;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            stmt = _ref[_i];
            _results.push(scales(stmt));
          }
          return _results;
        })(), _.identity);
      },
      'data': function(t) {},
      'statement': function(t) {
        if (t.statementType === 'SCALE') {
          return scales(t.expr);
        }
      },
      'function': match('name', 'scales.function', {
        'linear': function(fn) {
          var arg, scaleObj, _i, _len, _ref;
          scaleObj = {
            type: 'linear'
          };
          _ref = fn.args;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            arg = _ref[_i];
            scales(arg, scaleObj);
          }
          return scaleObj;
        },
        'dim': function(fn, obj) {
          if (fn.args.length !== 1) {
            throw Error('dim() expects one argument');
          }
          if (fn.args[0].type !== 'number') {
            throw Error('dim() expects a numeric argument');
          }
          return obj.dim = fn.args[0].value;
        }
      })
    });
    renderer = match('type', 'renderer', {
      'statements': function(stmts) {
        var renderers, stmt;
        renderers = (function() {
          var _i, _len, _ref, _results;
          _ref = stmts.statements;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            stmt = _ref[_i];
            _results.push(renderer(stmt));
          }
          return _results;
        })();
        renderers = _.filter(renderers, _.identity);
        return renderers[0];
      },
      'statement': function(t) {
        if (t.statementType === 'ELEMENT') {
          return renderer(t.expr);
        }
      },
      'data': function(t) {},
      'function': match('name', 'renderer.function', {
        'point': function(fn) {
          var arg, argFns, _i, _len, _ref;
          _ref = fn.args;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            arg = _ref[_i];
            argFns = renderer(arg);
          }
          return function(key) {
            var argFn, m, _j, _len1;
            m = mark().shape('circle').size(0.05);
            for (_j = 0, _len1 = argFns.length; _j < _len1; _j++) {
              argFn = argFns[_j];
              m = argFn(key, m);
            }
            return m;
          };
        },
        'position': function(fn, m) {
          return function(key, m) {
            var tuple, varset;
            varset = fn.args[0];
            tuple = varset.tuple(key);
            return m.x(tuple[0]).y(tuple[1]);
          };
        }
      })
    });
    show = match('type', 'show', {
      statements: function(t) {
        var s;
        return ((function() {
          var _i, _len, _ref, _results;
          _ref = t.statements;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            s = _ref[_i];
            _results.push(show(s));
          }
          return _results;
        })()).join('\n');
      },
      statement: function(t) {
        return "" + t.statementType + ": " + (show(t.expr));
      },
      data: function(t) {
        return "DATA: " + t.newName + "=\"" + t.oldName + "\"";
      },
      name: function(t) {
        return t.name;
      },
      number: function(t) {
        return t.value;
      },
      string: function(t) {
        return t.value;
      },
      cross: function(t) {
        return "" + (show(t.left)) + "*" + (show(t.right));
      },
      assignment: function(t) {
        return "" + (show(t.left)) + "=" + (show(t.right));
      },
      "function": function(t) {
        var a;
        return "" + t.name + "(" + (((function() {
          var _i, _len, _ref, _results;
          _ref = t.args;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            a = _ref[_i];
            _results.push(show(a));
          }
          return _results;
        })()).join(',')) + ")";
      },
      varset: function(t) {
        return '<varset>';
      }
    });
    return {
      execute: execute,
      variables: variables,
      algebra: algebra,
      scales: scales,
      show: show
    };
  });

}).call(this);
