// See Wilkinson's Grammar of Graphics p. 38
{
  // Import AST types for building the Abstract Syntax Tree.
  var AST = require('./AST.coffee');
  var Program = AST.Program;
  var Data = AST.Data;
  var Scale = AST.Scale;
  var Coord = AST.Coord;
  var Guide = AST.Guide;
  var Element = AST.Element;
  var Fn = AST.Fn;
  var Cross = AST.Cross;
  var Name = AST.Name;
  var Str = AST.Str;
  var Num = AST.Num;
}

start = stmts:stmt+ { return new Program(stmts); }

stmt = data
     / scale
     / coord
     / guide
     / element

data
  = "DATA:" ws* left:name ws* "=" ws* expr:(name / str) ws*
  { return new Data(left.value, expr); }

scale
  = "SCALE:" ws* fn:fn ws*
  { return new Scale(fn); }

coord
  = "COORD:" ws* fn:fn ws*
  { return new Coord(fn); }

guide
  = "GUIDE:" ws* fn:fn ws*
  { return new Guide(fn); }

element
  = "ELEMENT:" ws* fn:fn ws*
  { return new Element(fn); }

expr
  = fn
  / op
  / primitive

fn
  = name:([a-z]/".")+ args:args
  { return new Fn(name.join(''), args);}

args = "(" " "* args:arg* " "* ")" { return args; }

arg
  = expr:expr 
  / ws* "," ws* expr:expr
  { return expr; }

op
  = cross

cross
  = left:name " "* "*" " "* right:name
  { return new Cross(left, right); }

primitive
  = name
  / str
  / num

name
  = chars:([a-z]/[A-Z])+ 
  { return new Name(chars.join('')); }

str
  = '"' chars:[^"]* '"'
  { return new Str(chars.join('')); }

num
  = chars:[0-9]+
  { return new Num(parseFloat(chars.join(''))); }

ws = " " / "\n"
