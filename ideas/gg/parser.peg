// See Wilkinson's Grammar of Graphics p. 38
{
  // Import AST types for building the Abstract Syntax Tree.
  var AST = require('./AST.coffee');
  var Program = AST.Program;
  var Data = AST.Data;
  var FnStmt = AST.FnStmt;
  var Scale = AST.Scale;
  var Coord = AST.Coord;
  var Guide = AST.Guide;
  var Element = AST.Element;
  var Fn = AST.Fn;
  var Op = AST.Op;
  var Name = AST.Name;
  var Str = AST.Str;
  var Num = AST.Num;
}

start = stmts:stmt+ { return new Program(stmts); }

stmt
  = data
  / fnStmt

data
  = 'DATA:' ws* left:name ws* '=' ws* expr:(name / str) ws*
  { return new Data(left.value, expr); }

fnStmt
  = label:('SCALE'/'COORD'/'GUIDE'/'ELEMENT') ':' ws* fn:fn ws*
  { return FnStmt.create(label, fn); }

expr
  = fn
  / op
  / primitive

fn
  = name:([a-z]/'.')+ args:args
  { return new Fn(name.join(''), args);}

args 
  = '(' ws* args:arg* ws* ')'
  { return args; }

arg
  = expr:expr 
  / ws* ',' ws* expr:expr
  { return expr; }

op
  = left:name ws* sym:('*' / '+' / '/') ws* right:name
  { return Op.create(left, right, sym); }

primitive
  = name
  / str
  / num

name
  = chars:([a-z]/[A-Z])+ 
  { return new Name(chars.join('')); }

str
  = '"' chars:[^"]* '"'
  { return new Str(chars.join('')); }

num
  = chars:[0-9]+
  { return new Num(parseFloat(chars.join(''))); }

ws = ' ' / '\n'
