// Generated by CoffeeScript 1.6.1
(function() {
  var Point, Rect, Viewport, app, ctx, dest, e, express, i, inNode, match, out, port, size, square, squares, src, t, type, viewport, x, y, _i, _j, _len,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  type = function(obj, t) {
    var shouldError;
    if (obj === void 0) {
      throw Error('First argument to type() is null');
    }
    if (t === void 0) {
      throw Error('Second argument to type() is null');
    }
    shouldError = (function() {
      switch (t) {
        case Number:
          return typeof obj !== 'number';
        case String:
          return typeof obj !== 'string';
        default:
          return obj.constructor !== t;
      }
    })();
    if (shouldError) {
      throw Error('Type Error');
    }
  };

  match = function(fns) {
    return function(obj) {
      var constructor, fn;
      constructor = obj.constructor;
      fn = fns[constructor.name];
      while (!fn && constructor.__super__) {
        constructor = constructor.__super__.constructor;
        fn = fns[constructor.name];
      }
      if (fn) {
        return fn.apply(this, arguments);
      } else {
        throw Error("no match for type " + constructor.name + ".");
      }
    };
  };

  Point = (function() {

    function Point(x, y) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      type(this.x, Number);
      type(this.y, Number);
    }

    return Point;

  })();

  Rect = (function() {

    function Rect(x, y, w, h) {
      this.x = x != null ? x : 0;
      this.y = y != null ? y : 0;
      this.w = w != null ? w : 1;
      this.h = h != null ? h : 1;
      type(this.x, Number);
      type(this.y, Number);
      type(this.w, Number);
      type(this.h, Number);
    }

    return Rect;

  })();

  Viewport = (function() {

    function Viewport(src, dest) {
      this.src = src != null ? src : new Rect;
      this.dest = dest != null ? dest : new Rect;
      type(this.src, Rect);
      type(this.dest, Rect);
    }

    Viewport.prototype.project = match({
      Point: function(inPt, outPt) {
        var d, s;
        type(inPt, Point);
        type(outPt, Point);
        s = this.src;
        d = this.dest;
        outPt.x = (inPt.x - s.x) / s.w * d.w + d.x;
        return outPt.y = (inPt.y - s.y) / s.h * d.h + d.y;
      },
      Rect: function(inRect, outRect) {
        var d, s;
        type(inRect, Rect);
        type(outRect, Rect);
        s = this.src;
        d = this.dest;
        outRect.x = (inRect.x - s.x) / s.w * d.w + d.x;
        outRect.y = (inRect.y - s.y) / s.h * d.h + d.y;
        outRect.w = inRect.w * d.w / s.w;
        return outRect.h = inRect.h * d.h / s.h;
      }
    });

    return Viewport;

  })();

  t = function() {
    var Animal, Horse, Snake, dest, inPt, outPt, sam, sayHello, src, tom, viewport;
    Animal = (function() {

      function Animal(name) {
        this.name = name;
      }

      return Animal;

    })();
    Snake = (function(_super) {

      __extends(Snake, _super);

      function Snake() {
        return Snake.__super__.constructor.apply(this, arguments);
      }

      return Snake;

    })(Animal);
    Horse = (function(_super) {

      __extends(Horse, _super);

      function Horse() {
        return Horse.__super__.constructor.apply(this, arguments);
      }

      return Horse;

    })(Animal);
    sam = new Snake("Sammy the Python");
    tom = new Horse("Tommy the Palomino");
    sayHello = match({
      Snake: function(snake) {
        return "I am " + snake.name + ", hiss!";
      },
      Animal: function(animal) {
        return "I am " + animal.name + ", an animal.";
      }
    });
    e(sayHello(sam), 'I am Sammy the Python, hiss!');
    e(sayHello(tom), 'I am Tommy the Palomino, an animal.');
    e((new Point(4, 6)).x, 4);
    e((new Rect(5, 6, 7, 8)).w, 7);
    src = new Rect(0, 0, 1, 1);
    dest = new Rect(2, 4, 6, 8);
    viewport = new Viewport(src, dest);
    inPt = new Point(0.5, 0.75);
    outPt = new Point;
    viewport.project(inPt, outPt);
    e(outPt.x, 5);
    return e(outPt.y, 10);
  };

  e = function(a, b) {
    if (a !== b) {
      throw new Error("Expected " + a + ", got " + b);
    }
  };

  t();

  console.log('All tests passed!');

  inNode = typeof module !== 'undefined';

  if (inNode) {
    express = require('express');
    app = express();
    port = 8080;
    app.use(express["static"](__dirname));
    app.use(express.directory(__dirname));
    app.listen(port);
    console.log("Serving at localhost:" + port);
  } else {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    ctx = canvas.getContext('2d');
    ctx.fillStyle = 'darkBlue';
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    squares = [];
    size = 0.03;
    for (i = _i = 0; _i < 10; i = ++_i) {
      x = Math.random() * (1 - size);
      y = Math.random() * (1 - size);
      squares.push(new Rect(x, y, size, size));
    }
    src = new Rect(0, 0, 1, 1);
    dest = new Rect(0, 0, canvas.width, canvas.height);
    viewport = new Viewport(src, dest);
    out = new Rect;
    for (_j = 0, _len = squares.length; _j < _len; _j++) {
      square = squares[_j];
      viewport.project(square, out);
      ctx.fillStyle = 'yellow';
      ctx.fillRect(out.x, out.y, out.w, out.h);
    }
  }

}).call(this);
