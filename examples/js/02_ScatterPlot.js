//@ sourceMappingURL=02_ScatterPlot.map
// Generated by CoffeeScript 1.6.1
(function() {

  require(['cv/Component', 'cv/bindToCanvas', 'cv/readCSV', 'cv/Viewport', 'cv/Rectangle', 'cv/Varset', 'cv/mark'], function(Component, bindToCanvas, readCSV, Viewport, Rectangle, Varset, mark) {
    return readCSV('../data/iris.csv', function(err, columns) {
      var ScatterPlot, scale, scales, varset, viewport, xMax, xMin, xVar, xs, yMax, yMin, yVar, ys, _i, _len;
      xVar = Varset.fromVariable(columns['petal length']);
      yVar = Varset.fromVariable(columns['sepal length']);
      varset = Varset.cross(xVar, yVar);
      xs = _.map(varset.tuples(), function(tuple) {
        return tuple[0];
      });
      ys = _.map(varset.tuples(), function(tuple) {
        return tuple[1];
      });
      xMin = _.min(xs);
      xMax = _.max(xs);
      yMin = _.min(ys);
      yMax = _.max(ys);
      scales = [];
      scales.push({
        dim: 1,
        min: xMin,
        max: xMax
      });
      scales.push({
        dim: 2,
        min: yMin,
        max: yMax
      });
      for (_i = 0, _len = scales.length; _i < _len; _i++) {
        scale = scales[_i];
        _.extend(scale, {
          value: function(tuple) {
            return (tuple[this.dim - 1] - this.min) / (this.max - this.min);
          }
        });
      }
      ScatterPlot = Component.extend({
        paint: function(ctx, bounds) {
          var tuple, _j, _len1, _ref, _results;
          viewport.dest.copy(bounds);
          _ref = varset.tuples();
          _results = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            tuple = _ref[_j];
            _results.push(mark().x(scales[0].value(tuple)).y(scales[1].value(tuple)).size(0.1).fillStyle('rgba(0,0,0,0.2)').render(ctx, viewport));
          }
          return _results;
        }
      });
      viewport = new Viewport;
      return bindToCanvas('scatterPlot', new ScatterPlot);
    });
  });

}).call(this);
